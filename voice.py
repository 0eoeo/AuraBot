import os

import torch
from TTS.api import TTS
from TTS.tts.configs.xtts_config import XttsConfig, XttsAudioConfig
from TTS.config.shared_configs import BaseDatasetConfig
from TTS.tts.models.xtts import XttsArgs

# –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
torch.serialization.add_safe_globals([XttsConfig, XttsAudioConfig, BaseDatasetConfig, XttsArgs])

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (–Ω–∞ CPU)
tts = TTS(model_name="tts_models/multilingual/multi-dataset/xtts_v2", gpu=True)


def create_voice_answer(text,device="cuda"):
    speaker_wav = "–Ω—è—Ä—É.wav"
    output_path = "output.wav"

    try:
        tts.to(device)
        tts.tts_to_file(
            text=text,
            speaker_wav=speaker_wav,
            language="ru",
            file_path=output_path
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω –ª–∏ —Ñ–∞–π–ª –∏ –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ–Ω
        if os.path.exists(output_path) and os.path.getsize(output_path) > 0:
            print(f"üîä –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_path}")
            return output_path
        else:
            print("‚ö†Ô∏è –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π!")
            return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {e}")
        return None
# create_voice_answer('–ª—é–±–∞—è —Ö—É–π–Ω—è')