import os
import torch
import uuid
import asyncio
import concurrent.futures

from TTS.api import TTS
from TTS.tts.configs.xtts_config import XttsConfig, XttsAudioConfig
from TTS.config.shared_configs import BaseDatasetConfig
from TTS.tts.models.xtts import XttsArgs

# –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
torch.serialization.add_safe_globals([XttsConfig, XttsAudioConfig, BaseDatasetConfig, XttsArgs])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–Ω–∞ CPU –∏–ª–∏ GPU)
device = "cuda" if torch.cuda.is_available() else "cpu"
tts = TTS(model_name="tts_models/multilingual/multi-dataset/xtts_v2")
tts.to(device)

# –°–æ–∑–¥–∞—ë–º executor –¥–ª—è —Ñ–æ–Ω–∞
executor = concurrent.futures.ThreadPoolExecutor()

# –ü—É—Ç—å –∫ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É –≥–æ–ª–æ—Å—É
speaker_wav = "–Ω—è—Ä—É.wav"

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
def _generate_voice_sync(text: str, output_path: str):
    tts.tts_to_file(
        text=text,
        speaker_wav=speaker_wav,
        language="ru",
        file_path=output_path
    )

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞
async def create_voice_answer(text: str) -> str:
    output_filename = f"{uuid.uuid4().hex}.wav"
    output_path = os.path.join(os.getcwd(), output_filename)

    loop = asyncio.get_running_loop()
    try:
        await loop.run_in_executor(executor, _generate_voice_sync, text, output_path)

        if os.path.exists(output_path) and os.pathsize(output_path) > 0:
            print(f"üîä –ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_path}")
            return output_path
        else:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π!")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {e}")
        return None
