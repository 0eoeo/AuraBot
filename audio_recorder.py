import asyncio
import os
import shutil
import discord.sinks
import generate_answer


class AudioRecorder(discord.Client):
    def __init__(self, recognizer, tts, **options):
        super().__init__(**options)
        self.recognizer = recognizer
        self.tts = tts
        self.player = None
        self.gigachat = generate_answer.BotState()

    async def join_and_listen(self, message: discord.Message):
        if message.author.voice and message.author.voice.channel:
            channel = message.author.voice.channel
            vc = await channel.connect()
            print(f"üîä –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ {channel.name}")
            await self.listen_and_respond(vc)
        else:
            await message.channel.send("–¢—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")

    async def listen_and_respond(self, vc):
        while True:
            sink = discord.sinks.WaveSink()  # WAV-—Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏

            vc.start_recording(
                sink,
                finished_callback=self.on_recording_finished,
                ctx=None
            )

            print("üéôÔ∏è –ù–∞—á–∞–ª–∞—Å—å –∑–∞–ø–∏—Å—å...")
            await asyncio.sleep(5)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º 5 —Å–µ–∫—É–Ω–¥
            await vc.stop_recording()
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏

    async def on_recording_finished(self, sink: discord.sinks.Sink, *args):
        if not sink.audio_data:
            print("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        user_id, audio = next(iter(sink.audio_data.items()))
        file_path = f"temp_recording_{user_id}.wav"

        audio.file.seek(0)
        with open(file_path, "wb") as f:
            shutil.copyfileobj(audio.file, f)

        print(f"üìÅ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ —á–∏—Ç–∞–µ–º –∫–∞–∫ –±–∞–π—Ç—ã
        with open(file_path, "rb") as f:
            audio_bytes = f.read()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        received_text = await self.recognizer.recognize(audio_bytes)

        if received_text:
            print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {received_text}")
            self.gigachat.append_context(received_text)
            answer = self.gigachat.get_response_text()
            print(f"üìù –û—Ç–≤–µ—Ç: {answer}")
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            voice_path = await self.tts.create_voice_answer(answer)
            if voice_path:
                if self.player.is_playing():
                    self.player.stop()

                source = discord.FFmpegPCMAudio(voice_path)
                self.player.play(source)
                while self.player.is_playing():
                    await asyncio.sleep(1)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(file_path)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
