const cron = require('node-cron');
const axios = require('axios');
const { EmbedBuilder } = require('discord.js');

const ASTRO_API_KEY = process.env.ASTRO_API_KEY;

// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç —Å –ø–æ–º–æ—â—å—é axios –∏ –ø—Ä–æ–º–∏—Å–∞
async function getPlanetsData() {
  const now = new Date();
  const body = {
    year: now.getUTCFullYear(),
    month: now.getUTCMonth() + 1,
    date: now.getUTCDate(),
    hours: now.getUTCHours(),
    minutes: now.getUTCMinutes(),
    seconds: now.getUTCSeconds(),
    latitude: 55.7558,
    longitude: 37.6173,
    timezone: 3,
    config: {
      observation_point: 'topocentric',
      ayanamsha: 'tropical',
      language: 'ru'
    }
  };

  try {
    const response = await axios.post('https://json.freeastrologyapi.com/western/planets', body, {
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': ASTRO_API_KEY
      }
    });

    const data = response.data;

    if (!data || !Array.isArray(data.output)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API');
    }

    const planets = data.output.map(item => {
      const planetRu = item.planet?.ru || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const signRu = item.zodiac_sign?.name?.ru || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const normDeg = item.normDegree || 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º isRetro, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      let isRetro = false;
      if (typeof item.isRetro === 'string') {
        isRetro = item.isRetro.toLowerCase() === 'true';
      } else if (typeof item.isRetro === 'boolean') {
        isRetro = item.isRetro;
      }

      return {
        name: planetRu,
        sign: signRu,
        deg: normDeg,
        retro: isRetro
      };
    });

    return planets;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –ø–ª–∞–Ω–µ—Ç:', err.message, err.stack || '');
    return null;
  }
}

// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø —É FastAPI –ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –ø–ª–∞–Ω–µ—Ç
async function getHoroscopeFromAPI(planets) {
  try {
    const response = await axios.post('https://aurabot-1.onrender.com/horoscope', {
      planets: planets
    });

    return response.data?.text || '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø.';
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', err.message, err.stack || '');
    return '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø.';
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ (–ø–ª–∞–Ω–µ—Ç—ã + –≥–æ—Ä–æ—Å–∫–æ–ø), —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Discord
async function getHoroscopeMessage() {
  const planets = await getPlanetsData();
  if (!planets) {
    return ['‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö.'];
  }
  const horoscopeText = await getHoroscopeFromAPI(planets);
  const today = new Date().toLocaleDateString('ru-RU');
  const header = `üîÆ **–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ ${today}**`;

  const maxLen = 1500;
  const parts = [];
  parts.push(header);

  let text = horoscopeText;
  while (text.length > 0) {
    if (text.length <= maxLen) {
      parts.push(text);
      break;
    }
    let sliceIndex = text.lastIndexOf('\n', maxLen);
    if (sliceIndex === -1 || sliceIndex < maxLen / 2) {
      sliceIndex = text.lastIndexOf(' ', maxLen);
    }
    if (sliceIndex === -1 || sliceIndex < maxLen / 2) {
      sliceIndex = maxLen;
    }
    parts.push(text.slice(0, sliceIndex).trim());
    text = text.slice(sliceIndex).trim();
  }

  return parts;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º cron-–∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –≤ –∫–∞–Ω–∞–ª "–±–æ—Ç" –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ø–æ –ú–æ—Å–∫–≤–µ
function startHoroscopeTask(client, guildId) {
  cron.schedule('0 12 * * *', async () => {
    try {
      const guild = await client.guilds.fetch(guildId);
      const channel = guild.channels.cache.find(ch => ch.name === '–±–æ—Ç' && ch.isTextBased());
      if (!channel) {
        console.warn('‚ö†Ô∏è –ö–∞–Ω–∞–ª "–±–æ—Ç" –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const parts = await getHoroscopeMessage();

      const embeds = parts.map((part, i) =>
        new EmbedBuilder()
          .setColor('#0099ff')
          .setDescription(part)
          .setFooter({ text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${i + 1} –∏–∑ ${parts.length}` })
      );

      for (const embed of embeds) {
        await channel.send({ embeds: [embed] });
        await new Promise(r => setTimeout(r, 500));
      }

      console.log('‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª "–±–æ—Ç"');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', err.message, err.stack || '');
    }
  }, {
    timezone: 'Europe/Moscow'
  });
}

module.exports = { startHoroscopeTask, getHoroscopeMessage };
