const cron = require('node-cron');
const axios = require('axios');

const ASTRO_API_KEY = process.env.ASTRO_API_KEY;

const planetNamesRu = {
  Sun: '–°–æ–ª–Ω—Ü–µ',
  Moon: '–õ—É–Ω–∞',
  Mercury: '–ú–µ—Ä–∫—É—Ä–∏–π',
  Venus: '–í–µ–Ω–µ—Ä–∞',
  Mars: '–ú–∞—Ä—Å',
  Jupiter: '–Æ–ø–∏—Ç–µ—Ä',
  Saturn: '–°–∞—Ç—É—Ä–Ω',
  Uranus: '–£—Ä–∞–Ω',
  Neptune: '–ù–µ–ø—Ç—É–Ω',
  Pluto: '–ü–ª—É—Ç–æ–Ω',
};

const zodiacSignsRu = {
  Aries: '–û–≤–µ–Ω',
  Taurus: '–¢–µ–ª–µ—Ü',
  Gemini: '–ë–ª–∏–∑–Ω–µ—Ü—ã',
  Cancer: '–†–∞–∫',
  Leo: '–õ–µ–≤',
  Virgo: '–î–µ–≤–∞',
  Libra: '–í–µ—Å—ã',
  Scorpio: '–°–∫–æ—Ä–ø–∏–æ–Ω',
  Sagittarius: '–°—Ç—Ä–µ–ª–µ—Ü',
  Capricorn: '–ö–æ–∑–µ—Ä–æ–≥',
  Aquarius: '–í–æ–¥–æ–ª–µ–π',
  Pisces: '–†—ã–±—ã'
};

// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç
async function getPlanetsData() {
  try {
    const now = new Date();
    const isoDate = now.toISOString().split('T')[0];

    const response = await axios.get('https://api.freeastrologyapi.com/planets', {
      headers: {
        'X-API-KEY': ASTRO_API_KEY
      },
      params: {
        date: isoDate,
        location: 'Moscow'
      }
    });

    const data = response.data?.data;
    if (!data || !Array.isArray(data)) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');

    return data.map(planet => ({
      name: planetNamesRu[planet.name] || planet.name,
      sign: zodiacSignsRu[planet.sign] || planet.sign,
      deg: planet.deg // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–¥—É—Å—ã
    }));
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –ø–ª–∞–Ω–µ—Ç:', err.message);
    return null;
  }
}

// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø —É FastAPI –ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –ø–ª–∞–Ω–µ—Ç
async function getHoroscopeFromAPI(planets) {
  try {
    const response = await axios.post('https://aurabot-1.onrender.com/horoscope', {
      planets: planets
    });

    return response.data?.text || '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø.';
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', err.message);
    return '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø.';
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ (–ø–ª–∞–Ω–µ—Ç—ã + –≥–æ—Ä–æ—Å–∫–æ–ø)
async function getHoroscopeMessage() {
  const planets = await getPlanetsData();
  if (!planets) {
    return '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö.';
  }
  const horoscopeText = await getHoroscopeFromAPI(planets);
  const today = new Date().toLocaleDateString('ru-RU');
  return `üîÆ **–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ ${today}**\n\n${horoscopeText}`;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â—É—é –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –∫–∞–Ω–∞–ª
function startHoroscopeTask(client, guildId) {
  cron.schedule('0 0 * * *', async () => {
    try {
      const guild = await client.guilds.fetch(guildId);
      const channel = guild.channels.cache.find(ch => ch.name === '–±–æ—Ç' && ch.isTextBased());
      if (!channel) {
        console.warn('‚ö†Ô∏è –ö–∞–Ω–∞–ª "–±–æ—Ç" –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const message = await getHoroscopeMessage();
      await channel.send(message);
      console.log('‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª "–±–æ—Ç"');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', err.message);
    }
  }, {
    timezone: 'Europe/Moscow'
  });
}

module.exports = { startHoroscopeTask, getHoroscopeMessage };
