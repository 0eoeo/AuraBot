const {
  joinVoiceChannel,
  createAudioPlayer,
  createAudioResource,
  AudioPlayerStatus,
  StreamType
} = require('@discordjs/voice');
const { spawnSync, spawn } = require('child_process');
const ffmpeg = require('ffmpeg-static');
const path = require('path');

async function playMusicInVoiceChannel(url, interaction) {
  try {
    const voiceChannel = interaction.member.voice.channel;
    if (!voiceChannel) {
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({ content: 'üîá –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!', ephemeral: true });
      } else {
        await interaction.editReply('üîá –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!');
      }
      return;
    }

    if (!interaction.deferred && !interaction.replied) {
      await interaction.deferReply();
    }

    // === –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —á–µ—Ä–µ–∑ yt-dlp ===
    const formatsResult = spawnSync('yt-dlp', ['-J', '--cookies', 'cookies.txt', url], {
      encoding: 'utf-8'
    });

    if (formatsResult.status !== 0) {
      console.error('yt-dlp -J error:', formatsResult.stderr);
      await interaction.editReply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ –≤–∏–¥–µ–æ.');
      return;
    }

    let formatId = null;

    try {
      const json = JSON.parse(formatsResult.stdout);
      const audioFormats = json.formats.filter(f => f.acodec !== 'none' && f.vcodec === 'none');
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –∞–±–∏—Ç—Ä–µ–π—Ç ‚Äî –≤—ã—à–µ)
      audioFormats.sort((a, b) => (b.abr || 0) - (a.abr || 0));
      formatId = audioFormats[0]?.format_id;

      if (!formatId) {
        await interaction.editReply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.');
        return;
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç yt-dlp:', err);
      await interaction.editReply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ—Ä–º–∞—Ç–µ.');
      return;
    }

    // === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É ===
    const connection = joinVoiceChannel({
      channelId: voiceChannel.id,
      guildId: interaction.guild.id,
      adapterCreator: interaction.guild.voiceAdapterCreator
    });

    connection.on('error', error => {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º:', error);
      if (connection.state.status !== 'destroyed') connection.destroy();
    });

    // === –ó–∞–ø—É—Å–∫ yt-dlp ===
    const ytdlp = spawn('yt-dlp', ['-f', formatId, '--cookies', 'cookies.txt', '-o', '-', url]);
    ytdlp.stderr.on('data', data => {
      console.error(`yt-dlp error: ${data.toString()}`);
    });

    ytdlp.on('close', code => {
      if (code !== 0) {
        console.error(`yt-dlp exited with code ${code}`);
      }
    });

    // === –ó–∞–ø—É—Å–∫ ffmpeg ===
    const ffmpegProcess = spawn(ffmpeg, [
      '-i', 'pipe:0',
      '-f', 's16le',
      '-ar', '48000',
      '-ac', '2',
      'pipe:1'
    ]);

    ffmpegProcess.stderr.on('data', data => {
      console.error(`ffmpeg error: ${data.toString()}`);
    });

    ffmpegProcess.on('close', code => {
      if (code !== 0) {
        console.error(`ffmpeg exited with code ${code}`);
      }
    });

    ytdlp.stdout.pipe(ffmpegProcess.stdin);

    const resource = createAudioResource(ffmpegProcess.stdout, { inputType: StreamType.Raw });
    const player = createAudioPlayer();

    connection.subscribe(player);
    player.play(resource);

    player.on(AudioPlayerStatus.Playing, () => {
      console.log('‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è');
    });

    player.on(AudioPlayerStatus.Idle, () => {
      console.log('‚èπÔ∏è –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      if (connection.state.status !== 'destroyed') connection.destroy();
    });

    player.on('error', error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è:', error.message, error.stack);
      if (connection.state.status !== 'destroyed') connection.destroy();
    });

    await interaction.editReply('üé∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É –º—É–∑—ã–∫—É!');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ playMusicInVoiceChannel:', error);

    try {
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({ content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏.', ephemeral: true });
      } else {
        await interaction.editReply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏.');
      }
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e);
    }
  }
}

module.exports = { playMusicInVoiceChannel };
