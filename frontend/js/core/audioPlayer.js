const { Client, GatewayIntentBits } = require('discord.js');
const { Player } = require('discord-player');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

const player = new Player(client, {
  ytdlOptions: {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è yt-dlp
    quality: 'highestaudio',
    filter: 'audioonly',
    highWaterMark: 1 << 25,
  },
  // –ü—É—Ç—å –∫ ffmpeg –∏–∑ ffmpeg-static
  ffmpeg: require('ffmpeg-static'),
});

client.once('ready', () => {
  console.log(`Logged in as ${client.user.tag}`);
});

async function playMusicInVoiceChannel(url, interaction) {
  try {
    const voiceChannel = interaction.member.voice.channel;
    if (!voiceChannel) {
      const msg = 'üîá –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!';
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({ content: msg, ephemeral: true });
      } else {
        await interaction.editReply(msg);
      }
      return;
    }

    if (!interaction.deferred && !interaction.replied) {
      await interaction.deferReply();
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≥–∏–ª—å–¥–∏–∏
    const queue = player.nodes.create(interaction.guild, {
      metadata: {
        channel: interaction.channel,
        client: client.user,
        requestedBy: interaction.user,
      },
      selfDeaf: true,
      volume: 80,
    });

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã)
    if (!queue.connection) await queue.connect(voiceChannel);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å
    const track = await player
      .search(url, {
        requestedBy: interaction.user,
      })
      .then(x => x.tracks[0]);

    if (!track) {
      const msg = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—É.';
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({ content: msg, ephemeral: true });
      } else {
        await interaction.editReply(msg);
      }
      return;
    }

    queue.addTrack(track);

    if (!queue.node.isPlaying()) {
      await queue.node.play();
    }

    const msg = `üé∂ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: **${track.title}**`;
    if (interaction.deferred && !interaction.replied) {
      await interaction.editReply(msg);
    } else {
      await interaction.reply(msg);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ playMusicInVoiceChannel:', error);
    const msg = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—É–∑—ã–∫—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ.';
    try {
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({ content: msg, ephemeral: true });
      } else {
        await interaction.editReply(msg);
      }
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e);
    }
  }
}

module.exports = { playMusicInVoiceChannel, client };
