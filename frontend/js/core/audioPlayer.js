const {
  joinVoiceChannel,
  createAudioPlayer,
  createAudioResource,
  AudioPlayerStatus,
  StreamType
} = require('@discordjs/voice');
const { spawn } = require('child_process');
const ffmpeg = require('ffmpeg-static');
const fs = require('fs');

async function playMusicInVoiceChannel(url, interaction) {
  try {
    const voiceChannel = interaction.member.voice.channel;
    if (!voiceChannel) {
      const msg = 'üîá –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!';
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({ content: msg, ephemeral: true });
      } else {
        await interaction.editReply(msg);
      }
      return;
    }

    if (!interaction.deferred && !interaction.replied) {
      await interaction.deferReply();
    }

    if (!interaction.guild?.voiceAdapterCreator) {
      throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–∞–ø—Ç–µ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞');
    }

    const connection = joinVoiceChannel({
      channelId: voiceChannel.id,
      guildId: interaction.guild.id,
      adapterCreator: interaction.guild.voiceAdapterCreator
    });

    connection.on('error', error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º:', error);
      if (connection.state.status !== 'destroyed') connection.destroy();
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies.txt
    const cookiesExists = fs.existsSync('cookies.txt');
    if (!cookiesExists) {
      console.warn('‚ö†Ô∏è –§–∞–π–ª cookies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ');
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —á–µ—Ä–µ–∑ yt-dlp -J (JSON)
    const formatId = await new Promise((resolve, reject) => {
      const args = ['-J', url];
      if (cookiesExists) args.splice(1, 0, '--cookies', 'cookies.txt');
      const ytdlpFormats = spawn('yt-dlp', args);

      let stdout = '';
      let stderr = '';

      ytdlpFormats.stdout.on('data', data => stdout += data.toString());
      ytdlpFormats.stderr.on('data', data => stderr += data.toString());

      ytdlpFormats.on('close', code => {
        if (code !== 0) {
          console.error('‚ùå yt-dlp (format fetch) error:', stderr);
          return reject(new Error('yt-dlp exited with code ' + code));
        }

        try {
          const json = JSON.parse(stdout);
          console.log('üì¶ –§–æ—Ä–º–∞—Ç—ã yt-dlp:', json.formats.map(f => ({
            format_id: f.format_id,
            ext: f.ext,
            acodec: f.acodec,
            vcodec: f.vcodec,
            abr: f.abr
          })));

          // –í—ã–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç—ã –±–µ–∑ –≤–∏–¥–µ–æ –∏–ª–∏ —Å vcodec none, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ bitrate
          const audioFormats = json.formats
          .filter(f => f.acodec !== 'none' && (f.vcodec === 'none' || f.format_id === '18'))
          .sort((a, b) => ( (b.abr || 128) - (a.abr || 128) ));


          if (!audioFormats.length) {
            return reject(new Error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤'));
          }

          resolve(audioFormats[0].format_id);

        } catch (e) {
          console.error('‚ùå yt-dlp –Ω–µ —Å–º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å JSON:', stdout);
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤:', e);
          reject(e);
        }
      });
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º yt-dlp —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    const ytdlpArgs = ['-f', formatId, '-o', '-', url];
    if (cookiesExists) {
      ytdlpArgs.splice(2, 0, '--cookies', 'cookies.txt');  // –≤—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–¥ URL
    }
    const ytdlp = spawn('yt-dlp', ytdlpArgs);

    ytdlp.stderr.on('data', data => {
      console.error(`yt-dlp error: ${data.toString()}`);
    });

    ytdlp.on('close', code => {
      if (code !== 0) console.error(`yt-dlp exited with code ${code}`);
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg
    const ffmpegProcess = spawn(ffmpeg, [
      '-i', 'pipe:0',
      '-f', 's16le',
      '-ar', '48000',
      '-ac', '2',
      'pipe:1'
    ]);

    ffmpegProcess.stderr.on('data', data => {
      console.error(`ffmpeg error: ${data.toString()}`);
    });

    ffmpegProcess.on('close', code => {
      if (code !== 0) console.error(`ffmpeg exited with code ${code}`);
    });

    ytdlp.stdout.pipe(ffmpegProcess.stdin);

    const resource = createAudioResource(ffmpegProcess.stdout, { inputType: StreamType.Raw });
    const player = createAudioPlayer();
    connection.subscribe(player);
    player.play(resource);

    player.on(AudioPlayerStatus.Playing, () => {
      console.log('‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è');
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    player.on(AudioPlayerStatus.Idle, () => {
      console.log('‚èπÔ∏è –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      ytdlp.kill('SIGKILL');
      ffmpegProcess.kill('SIGKILL');
      if (connection.state.status !== 'destroyed') connection.destroy();
    });

    player.on('error', error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è:', error.message, error.stack);
      ytdlp.kill('SIGKILL');
      ffmpegProcess.kill('SIGKILL');
      if (connection.state.status !== 'destroyed') connection.destroy();
    });

    if (interaction.deferred && !interaction.replied) {
      await interaction.editReply('üé∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É –º—É–∑—ã–∫—É!');
    }

    // –ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç –ø—Ä–æ—Å—Ç–æ—è (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å)
    /*
    setTimeout(() => {
      if (connection.state.status !== 'destroyed') {
        console.log('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ');
        ytdlp.kill('SIGKILL');
        ffmpegProcess.kill('SIGKILL');
        connection.destroy();
      }
    }, 5 * 60 * 1000);
    */

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ playMusicInVoiceChannel:', error);
    const msg = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—É–∑—ã–∫—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ.';
    try {
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({ content: msg, ephemeral: true });
      } else {
        await interaction.editReply(msg);
      }
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e);
    }
  }
}

module.exports = { playMusicInVoiceChannel };
