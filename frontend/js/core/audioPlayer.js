const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, StreamType } = require('@discordjs/voice');
const ytdlp = require('yt-dlp-exec');
const ffmpeg = require('fluent-ffmpeg');
const ffmpegPath = require('ffmpeg-static');
const { PassThrough } = require('stream');

ffmpeg.setFfmpegPath(ffmpegPath);

async function playMusicInVoiceChannel(url, interaction) {
const voiceChannel = interaction.member?.voice?.channel;

if (!voiceChannel) {
return interaction.reply('‚ùå –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!');
}

const connection = joinVoiceChannel({
channelId: voiceChannel.id,
guildId: voiceChannel.guild.id,
adapterCreator: voiceChannel.guild.voiceAdapterCreator,
});

const player = createAudioPlayer();
connection.subscribe(player);

try {
// –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ —Å YouTube
const ytStream = ytdlp.exec(url, {
output: '-',
format: 'bestaudio',
quiet: true,
restrictFilenames: true,
noWarnings: true,
});

javascript
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
const ffmpegStream = new PassThrough();

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ ffmpeg –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç
ffmpeg(ytStream.stdout)
  .audioCodec('libopus')
  .format('opus')
  .on('error', (err) => {
    console.error('FFmpeg error:', err.message);
    if (!interaction.replied && !interaction.deferred) {
      interaction.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.');
    }
    connection.destroy();
  })
  .pipe(ffmpegStream, { end: true });

const resource = createAudioResource(ffmpegStream, {
  inputType: StreamType.Opus,
});

player.play(resource);

player.once(AudioPlayerStatus.Playing, async () => {
  try {
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply(`üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ${url}`);
    }
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å reply:', err.message);
  }
});

player.once(AudioPlayerStatus.Idle, () => {
  connection.destroy();
});

player.on('error', async (error) => {
  console.error('–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ:', error);
  try {
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ.');
    } else {
      await interaction.followUp('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ.');
    }
  } catch (e) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e.message);
  }
  connection.destroy();
});
} catch (error) {
console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
try {
if (!interaction.replied && !interaction.deferred) {
await interaction.reply('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
} else {
await interaction.followUp('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
}
} catch (e) {
console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e.message);
}
connection.destroy();
}
}

module.exports = { playMusicInVoiceChannel };