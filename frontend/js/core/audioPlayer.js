const {
  joinVoiceChannel,
  createAudioPlayer,
  createAudioResource,
  AudioPlayerStatus,
  StreamType
} = require('@discordjs/voice');
const { spawn } = require('child_process');
const ffmpeg = require('ffmpeg-static');

async function playMusicInVoiceChannel(url, interaction) {
  try {
    const voiceChannel = interaction.member.voice.channel;
    if (!voiceChannel) {
      // –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—è –µ—â–µ –Ω–µ –±—ã–ª–∞ –æ—Ç–≤–µ—á–µ–Ω–∞, –æ—Ç–≤–µ—á–∞–µ–º
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply('üîá –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!');
      } else {
        // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        await interaction.editReply('üîá –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!');
      }
      return;
    }

    // –î–µ—Ñ–µ—Ä–∏–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã Discord –Ω–µ –∑–∞–∫—Ä—ã–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é
    if (!interaction.deferred && !interaction.replied) {
      await interaction.deferReply();
    }

    const connection = joinVoiceChannel({
      channelId: voiceChannel.id,
      guildId: interaction.guild.id,
      adapterCreator: interaction.guild.voiceAdapterCreator
    });

    const ytdlp = spawn('yt-dlp', ['--cookies-from-browser', 'chrome', '-f', 'bestaudio', '-o', '-', url]);
    ytdlp.stderr.on('data', data => {
      console.error(`yt-dlp error: ${data.toString()}`);
    });

    const ffmpegProcess = spawn(ffmpeg, [
      '-i', 'pipe:0',
      '-f', 's16le',
      '-ar', '48000',
      '-ac', '2',
      'pipe:1'
    ]);
    ffmpegProcess.stderr.on('data', data => {
      console.error(`ffmpeg error: ${data.toString()}`);
    });

    ytdlp.stdout.pipe(ffmpegProcess.stdin);

    const resource = createAudioResource(ffmpegProcess.stdout, {
      inputType: StreamType.Raw
    });

    const player = createAudioPlayer();
    connection.subscribe(player);
    player.play(resource);

    player.on(AudioPlayerStatus.Playing, () => {
      console.log('‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è');
    });

    player.on(AudioPlayerStatus.Idle, () => {
      console.log('‚èπÔ∏è –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      if (connection.state.status !== 'destroyed') connection.destroy();
    });

    player.on('error', error => {
      console.error('üéß –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è:', error.message);
      if (connection.state.status !== 'destroyed') connection.destroy();
    });

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ —Ä–∞–Ω–µ–µ –æ—Ç–≤–µ—Ç–æ–º
    if (!interaction.replied) {
      await interaction.editReply('üé∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É –º—É–∑—ã–∫—É!');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ playMusicInVoiceChannel:', error);
    try {
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏.', ephemeral: true });
      } else {
        await interaction.editReply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏.');
      }
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e);
    }
  }
}

function skipSong(message) {
  const state = require('./voiceManager').getGuildState(message.guild.id);
  if (!state) return message.reply('‚ùó –í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –º—É–∑—ã–∫–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.');
  state.player.stop();
  message.reply('‚è© –ü–µ—Å–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∞!');
}

function stopMusic(message) {
  const state = require('./voiceManager').getGuildState(message.guild.id);
  if (!state) return message.reply('‚ùó –ù–µ—Ç –º—É–∑—ã–∫–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.');
  state.playbackQueue = [];
  state.player.stop();
  message.reply('‚èπÔ∏è –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
}

module.exports = { playMusicInVoiceChannel, skipSong, stopMusic };
