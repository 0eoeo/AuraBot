const {
  joinVoiceChannel,
  createAudioPlayer,
  createAudioResource,
  entersState,
  AudioPlayerStatus,
  StreamType,
  VoiceConnectionStatus
} = require('@discordjs/voice');
const { spawn } = require('child_process');
const ffmpeg = require('ffmpeg-static');
const ytdlpExec = require('yt-dlp-exec').default;
const fs = require('fs');

async function playMusicInVoiceChannel(url, interaction) {
  try {
    const voiceChannel = interaction.member.voice.channel;
    if (!voiceChannel) {
      const msg = 'üîá –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!';
      // –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º reply, –∏–Ω–∞—á–µ editReply
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({ content: msg, ephemeral: true });
      } else if (interaction.deferred && !interaction.replied) {
        await interaction.editReply(msg);
      }
      return;
    }

    // –î–µ–ª–∞–µ–º defer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
    if (!interaction.deferred && !interaction.replied) {
      await interaction.deferReply();
    }

    if (!interaction.guild?.voiceAdapterCreator) {
      throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–∞–ø—Ç–µ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞');
    }

    const connection = joinVoiceChannel({
      channelId: voiceChannel.id,
      guildId: interaction.guild.id,
      adapterCreator: interaction.guild.voiceAdapterCreator
    });

    connection.on('error', error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º:', error);
      if (connection.state.status !== 'destroyed') connection.destroy();
    });

    await entersState(connection, VoiceConnectionStatus.Ready, 30_000);

    const cookiesExists = fs.existsSync('cookies.txt');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –æ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ
    const info = await ytdlpExec(url, {
      dumpSingleJson: true,
      noWarnings: true,
      noCheckCertificates: true,
      noCallHome: true,
      noPlaylist: true,
      referer: 'https://www.youtube.com',
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
      addHeader: ['Accept-Language: en-US,en;q=0.9'],
      ...(cookiesExists ? { cookies: 'cookies.txt' } : {}),
    });

    const audioFormats = info.formats
      .filter(f => f.acodec !== 'none' && f.url)
      .sort((a, b) => (b.abr || 0) - (a.abr || 0));

    if (!audioFormats.length) throw new Error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤');

    const bestAudio = audioFormats[0];

    console.log('‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º:', info.title);

    const ffmpegProcess = spawn(ffmpeg, [
      '-i', bestAudio.url,
      '-f', 's16le',
      '-ar', '48000',
      '-ac', '2',
      'pipe:1'
    ]);

    ffmpegProcess.stderr.on('data', data => {
      console.error(`ffmpeg error: ${data.toString()}`);
    });

    ffmpegProcess.on('close', code => {
      if (code !== 0) console.error(`ffmpeg exited with code ${code}`);
    });

    const resource = createAudioResource(ffmpegProcess.stdout, { inputType: StreamType.Raw });
    const player = createAudioPlayer();

    connection.subscribe(player);
    player.play(resource);

    player.on(AudioPlayerStatus.Playing, () => {
      console.log('‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è');
    });

    player.on(AudioPlayerStatus.Idle, () => {
      console.log('‚èπÔ∏è –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      ffmpegProcess.kill('SIGKILL');
      if (connection.state.status !== 'destroyed') connection.destroy();
    });

    player.on('error', error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è:', error);
      ffmpegProcess.kill('SIGKILL');
      if (connection.state.status !== 'destroyed') connection.destroy();
    });

    // –ï—Å–ª–∏ –±—ã–ª defer –∏ –µ—â–µ –Ω–µ –±—ã–ª –æ—Ç–≤–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ editReply
    if (interaction.deferred && !interaction.replied) {
      await interaction.editReply(`üé∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É: **${info.title}**`);
    } else if (!interaction.deferred && !interaction.replied) {
      // –ï—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–æ defer –Ω–µ –≤—ã–∑–≤–∞–Ω, –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
      await interaction.reply(`üé∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É: **${info.title}**`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ playMusicInVoiceChannel:', error);
    const msg = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—É–∑—ã–∫—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ.';
    try {
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({ content: msg, ephemeral: true });
      } else if (interaction.deferred && !interaction.replied) {
        await interaction.editReply(msg);
      }
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e);
    }
  }
}

module.exports = { playMusicInVoiceChannel };
