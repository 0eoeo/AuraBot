const { Client, GatewayIntentBits, Partials } = require('discord.js');
const { handleInteraction } = require('./core/messageHandler');
const { handleTextMessage } = require('./core/textHandler');
const { getGuildState } = require('./core/voiceManager');
const { startVoiceCoinsTask } = require('./core/characterHandler');
const express = require('express');
require('dotenv').config({ path: '../.env' });

const GUILD_ID = process.env.GUILD_ID;
const BOT_TOKEN = process.env.BOT_TOKEN;
const PORT = process.env.PORT || 3000;

if (!BOT_TOKEN || !GUILD_ID) {
  console.error('‚ùå –£–±–µ–¥–∏—Å—å, —á—Ç–æ BOT_TOKEN –∏ GUILD_ID –∑–∞–¥–∞–Ω—ã –≤ .env');
  process.exit(1);
}

// üåê HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
const app = express();
app.get('/', (req, res) => res.send('Bot is running'));
app.listen(PORT, () => console.log(`üåê HTTP server listening on port ${PORT}`));

// ü§ñ –ö–ª–∏–µ–Ω—Ç Discord
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
  partials: [Partials.Channel],
});

client.once('ready', () => {
  console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
  startVoiceCoinsTask(client, GUILD_ID);
});

// üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
client.on('messageCreate', async (message) => {
  if (message.author.bot || message.channel.name !== '–±–æ—Ç') return;

  const state = getGuildState(message.guild.id) || {};
  const { playbackQueue = [], isPlaying = false, playNext = () => {} } = state;

  const wrappedPlayNext = () => {
    state.isPlaying = true;
    playNext();
  };

  handleTextMessage(message, playbackQueue, isPlaying, wrappedPlayNext);
});

// ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ slash-–∫–æ–º–∞–Ω–¥
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isChatInputCommand()) return;

  try {
    await interaction.deferReply({ ephemeral: true });
    await handleInteraction(interaction);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error);

    try {
      const errorMsg = { content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.' };
      if (interaction.replied || interaction.deferred) {
        await interaction.followUp(errorMsg);
      } else {
        await interaction.reply(errorMsg);
      }
    } catch (followUpError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ follow-up:', followUpError);
    }
  }
});

client.login(BOT_TOKEN);