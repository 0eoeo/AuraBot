const { Client, GatewayIntentBits } = require('discord.js');
const { handleInteraction } = require('./core/messageHandler');
const { handleTextMessage } = require('./core/textHandler');
const { getGuildState } = require('./core/voiceManager');
const { startVoiceCoinsTask } = require('./core/characterHandler'); // –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å
require('dotenv').config({ path: '../.env' });

const GUILD_ID = process.env.GUILD_ID; // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —Å–µ—Ä–≤–µ—Ä–∞

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

client.once('ready', () => {
  console.log(`üîä Logged in –∫–∞–∫ ${client.user.tag}`);

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
  startVoiceCoinsTask(client, GUILD_ID);
});

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  if (message.channel.name === '–±–æ—Ç') {
    const state = getGuildState(message.guild.id);
    const { playbackQueue = [], isPlaying = false, playNext = () => {} } = state || {};

    const wrappedPlayNext = () => {
      if (state) {
        state.isPlaying = true;
        playNext();
      }
    };

    handleTextMessage(message, playbackQueue, isPlaying, wrappedPlayNext);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isChatInputCommand()) return;

  try {
    await interaction.deferReply(); // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
    await handleInteraction(interaction); // –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);

    try {
      if (interaction.deferred || interaction.replied) {
        await interaction.followUp({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true });
      } else {
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true });
      }
    } catch (replyError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ follow-up –æ—Ç–≤–µ—Ç–∞:', replyError);
    }
  }
});


client.login(process.env.BOT_TOKEN);
