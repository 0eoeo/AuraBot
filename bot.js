const { Client, GatewayIntentBits } = require('discord.js');
const {
    joinVoiceChannel,
    getVoiceConnection,
    EndBehaviorType,
    createAudioPlayer,
    createAudioResource,
    AudioPlayerStatus,
    StreamType
} = require('@discordjs/voice');
const prism = require('prism-media');
const fs = require('fs');
const axios = require('axios');
const ytdl = require('ytdl-core');
const ffmpeg = require('ffmpeg-static');
const { spawn } = require('child_process');
const path = require('path');
require('dotenv').config();

const { joinVoice, leaveVoice, getGuildState } = require('./js/voice/manager');
const handleTextMessage = require('./js/text/text_handler');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

client.once('ready', () => {
  console.log(`üîä Logged in as ${client.user.tag}`);
});

client.on('messageCreate', async message => {
  if (message.author.bot) return;

  if (message.content.startsWith('!play ')) {
        const url = message.content.split(' ')[1];
        if (!url || !ytdl.validateURL(url)) {
            return message.reply('‚ùó –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube!');
        }

        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) return message.reply('üîá –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!');

        try {
            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –º—É–∑—ã–∫—É
            await playMusicInVoiceChannel(url, message, voiceChannel);
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏:', err.message);
            message.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ');
        }
    }

    if (message.content === '!skip') {
        skipSong(message);
    }

    if (message.content === '!stop') {
        stopMusic(message);
    }

  if (message.content === '!join') return joinVoice(message);
  if (message.content === '!leave') return leaveVoice(message);

  if (message.channel.name !== '–≥–µ—Ä—Ç–∞') return;

  const state = getGuildState(message.guild.id);
  const { playbackQueue = [], isPlaying = false, playNext = () => {} } = state || {};

  const wrappedPlayNext = () => {
    if (state) {
      state.isPlaying = true;
      playNext();
    }
  };

  handleTextMessage(message, playbackQueue, isPlaying, wrappedPlayNext);
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏
async function playMusicInVoiceChannel(url, message, voiceChannel) {
    const connection = joinVoiceChannel({
        channelId: voiceChannel.id,
        guildId: message.guild.id,
        adapterCreator: message.guild.voiceAdapterCreator
    });

    const ytdlpProcess = spawn('yt-dlp', [
        '-f', 'bestaudio',
        '-o', '-',
        '--retries', '10',
        '--fragment-retries', '10',
        '--socket-timeout', '15',
        '--force-ipv4', // –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ —Å—Ç—Ä–∞–Ω–Ω–æ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏ IPv6
        url
    ]);

    const ffmpegProcess = spawn(ffmpeg, [
        '-i', 'pipe:0',
        '-f', 's16le',
        '-ar', '48000',
        '-ac', '2',
        'pipe:1'
    ]);

    ytdlpProcess.stdout.once('readable', () => {
        ytdlpProcess.stdout.pipe(ffmpegProcess.stdin);
    });

    ytdlpProcess.stderr.on('data', data => {
        console.error(`yt-dlp error: ${data}`);
    });

    ytdlpProcess.on('close', code => {
        if (code !== 0) {
            console.error(`yt-dlp exited with code ${code}`);
        }
    });

    const resource = createAudioResource(ffmpegProcess.stdout, {
        inputType: StreamType.Raw
    });

    const player = createAudioPlayer();
    connection.subscribe(player);
    player.play(resource);

    player.on(AudioPlayerStatus.Playing, () => {
        console.log('‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è');
        message.reply('üé∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É –º—É–∑—ã–∫—É!');
    });

    player.on(AudioPlayerStatus.Idle, () => {
        console.log('‚èπÔ∏è –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        if (connection.state.status !== 'destroyed') {
            connection.destroy();
        }
    });

    player.on('error', error => {
        console.error('üéß –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è:', error.message);
        if (connection.state.status !== 'destroyed') {
            connection.destroy();
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –ø–µ—Å–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏
function play(guild, song) {
    const serverQueue = queue.get(guild.id);

    if (!song) {
        serverQueue.connection.destroy();
        queue.delete(guild.id);
        return;
    }

    const resource = createAudioResource(song.stream, {
        inputType: StreamType.Arbitrary,
        metadata: { title: song.title }
    });

    serverQueue.player.play(resource);

    serverQueue.connection.subscribe(serverQueue.player);

    serverQueue.player.on(AudioPlayerStatus.Playing, () => {
        console.log(`‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: ${song.title}`);
        serverQueue.textChannel.send(`üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ${song.title}`);
    });

    serverQueue.player.on(AudioPlayerStatus.Idle, () => {
        serverQueue.songs.shift();
        play(guild, serverQueue.songs[0]);
    });

    serverQueue.player.on('error', (error) => {
        console.error('üéß –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è:', error);
        serverQueue.songs.shift();
        play(guild, serverQueue.songs[0]);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏
function skipSong(message) {
    const serverQueue = queue.get(message.guild.id);
    if (!serverQueue) {
        return message.reply('‚ùó –í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –º—É–∑—ã–∫–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.');
    }
    serverQueue.player.stop();
    message.reply('‚è© –ü–µ—Å–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∞!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º—É–∑—ã–∫–∏
function stopMusic(message) {
    const serverQueue = queue.get(message.guild.id);
    if (!serverQueue) {
        return message.reply('‚ùó –ù–µ—Ç –º—É–∑—ã–∫–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.');
    }
    serverQueue.songs = [];
    serverQueue.player.stop();
    message.reply('‚èπÔ∏è –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
}

client.login(process.env.BOT_TOKEN);
