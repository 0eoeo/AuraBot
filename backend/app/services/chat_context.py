import re

from langchain_community.chat_models.gigachat import GigaChat
from langchain.schema import HumanMessage, SystemMessage
from ..config import GIGACHAT_TOKEN, OBSCENE_PATTERNS, OBSCENE_REPLACEMENTS


class ChatContextManager:
    def __init__(self):
        self.chat = GigaChat(credentials=GIGACHAT_TOKEN, verify_ssl_certs=False)
        self.messages = [
            SystemMessage(content=(
                "–¢–µ–±—è –∑–æ–≤—É—Ç –ì–µ—Ä—Ç–∞, —Ç–µ–±–µ 18 –ª–µ—Ç. –¢—ã –¥–µ–≤—É—à–∫–∞-–∫—É–∫–ª–∞ –∏–∑ Honkai Star Rail. "
                "–£ —Ç–µ–±—è –≤–µ—Å—ë–ª—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. "
                "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ —Å –≥—Ä—É–ø–ø–æ–π –ª—é–¥–µ–π. "
                "–û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º –∏ –∫—Ä–∞—Ç–∫–æ, –Ω–∞–∑—ã–≤–∞–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏."
                "–ù–µ —É–∫–∞–∑—ã–≤–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ –≤ —Ä–µ–ø–ª–∏–∫–∞—Ö."
            ))
        ]
        self.max_history = 10

    @staticmethod
    def find_obscene_words(text: str):
        matched_words = set()
        for pattern in OBSCENE_PATTERNS:
            for match in pattern.finditer(text):  # —É–±—Ä–∞–ª–∏ `flags`
                matched_words.add(match.group().lower())
        return matched_words

    async def append(self, user_text: str):
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–æ —Ñ–∏–ª—å—Ç—Ä–∞): {user_text}")

        for pattern, replacement in OBSCENE_REPLACEMENTS.items():
            user_text = re.sub(pattern, replacement, user_text, flags=re.IGNORECASE)

        user_text = re.sub(r'\s+', ' ', user_text).strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ
        obscene_words = self.find_obscene_words(user_text)

        for word in obscene_words:
            user_text = re.sub(rf'\b{re.escape(word)}\b', '', user_text, flags=re.IGNORECASE)

        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞): {user_text}")

        if self.messages[-1].type == 'human':
            self.messages[-1].content += f" {user_text}"
        else:
            self.messages.append(HumanMessage(content=user_text))

        if len(self.messages) > self.max_history:
            self.messages = [self.messages[0]] + self.messages[-self.max_history:]

    async def get_response(self):
        try:
            response = self.chat.invoke(self.messages)
            print(f"ü§ñ –ë–æ—Ç: {response.content}")
            self.messages.append(response)
            return response.content.replace('–ì–µ—Ä—Ç–∞: ', ' ')
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat: {e}")
            return None
